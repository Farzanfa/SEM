/*
Connect Vcc and Gnd of sensor to arduino, and the 
signal line to arduino digital pin 2.
 */
#include <SoftwareSerial.h>
SoftwareSerial gprsSerial(7, 8); //rx, tx

byte statusLed    = 13;

byte sensorInterrupt = 0;  // 0 = digital pin 2
byte sensorPin       = 2;  //  ''

/* The hall-effect flow sensor outputs approximately 4.5 pulses per second per litre/minute of flow.*/
float calibrationFactor = 4.5;

volatile byte pulseCount;  

float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;

unsigned long oldTime_flow;
unsigned long oldTime_gprs;

unsigned long consumer_number;

void setup()
{
  gprsSerial.begin(9600);
  delay(2000);
   Serial.println("Config SIM900...Done!...");
  // Initialize a serial connection for reporting values to the host
  Serial.begin(9600);   
  gprsSerial.flush();
  pinMode(statusLed, OUTPUT);  // Set up the status LED line as an output
  digitalWrite(statusLed, HIGH);  // We have an active-low LED attached
  
  pinMode(sensorPin, INPUT);
  digitalWrite(sensorPin, HIGH);

  consumer_number   = 123456;
  pulseCount        = 0;
  flowRate          = 0.0;
  flowMilliLitres   = 0;
  totalMilliLitres  = 0;
  oldTime_flow      = 0;
  oldTime_gprs      = 0;

  // attach or detach from GPRS service 
  gprsSerial.println("AT+CGATT?");
 delay(100);
 toSerial();


  // bearer settings
  gprsSerial.println("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"");
  delay(2000);
  toSerial();

  // bearer settings
  //gprsSerial.println("AT+SAPBR=3,1,\"APN\",\"epc.tmobile.com\"");
  //delay(2000);
  //toSerial();

  // bearer settings
  gprsSerial.println("AT+SAPBR=1,1");
  delay(2000);
  toSerial();

  // The Hall-effect sensor is connected to pin 2 which uses interrupt 0.
  // Configured to trigger on a FALLING state change (transition from HIGH
  // state to LOW state)
  attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
}

/**
 * Main program loop
 */

 
void loop()
{
      
       if((millis() - oldTime_flow) > 1000)    // Only process counters once per second
      { 
        detachInterrupt(sensorInterrupt);
            
        // Because this loop may not complete in exactly 1 second intervals we calculate
        // the number of milliseconds that have passed since the last execution and use
        // that to scale the output. We also apply the calibrationFactor to scale the output
        // based on the number of pulses per second per units of measure (litres/minute in
        // this case) coming from the sensor.
        flowRate = ((1000.0 / (millis() - oldTime_flow)) * pulseCount) / calibrationFactor;
        
        // Note the time this processing pass was executed. Note that because we've
        // disabled interrupts the millis() function won't actually be incrementing right
        // at this point, but it will still return the value it was set to just before
        // interrupts went away.
        oldTime_flow = millis();
        
        // Divide the flow rate in litres/minute by 60 to determine how many litres have
        // passed through the sensor in this 1 second interval, then multiply by 1000 to
        // convert to millilitres.
        flowMilliLitres = (flowRate / 60) * 1000;
        
        // Add the millilitres passed in this second to the cumulative total
        totalMilliLitres += flowMilliLitres;
          
        unsigned int frac;
        
        // Print the flow rate for this second in litres / minute
        Serial.print("flow rate: ");
        Serial.print(int(flowRate));  // Print the integer part of the variable
        Serial.print(".");             // Print the decimal point
        // Determine the fractional part. The 10 multiplier gives us 1 decimal place.
        frac = (flowRate - int(flowRate)) * 10;
        Serial.print(frac, DEC) ;      // Print the fractional part of the variable
        Serial.print("L/min");
        // Print the number of litres flowed in this second
        Serial.print("  current liquid flowing: ");             // Output separator
        Serial.print(flowMilliLitres);
        Serial.print("mL/Sec");
    
        // Print the cumulative total of litres flowed since starting
        Serial.print("  output liquid quantity: ");             // Output separator
        Serial.print(totalMilliLitres);
        Serial.println("mL"); 
    
        // Reset the pulse counter so we can start incrementing again
        pulseCount = 0;
        
        // Enable the interrupt again now that we've finished sending output
        attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
      }

       if((millis() - oldTime_gprs) > 60000)
       {
             oldTime_gprs = millis();
              // initialize http service
             gprsSerial.println("AT+HTTPINIT");
             delay(2000); 
             toSerial();
          
             // set http param value
             gprsSerial.print("AT+HTTPPARA=\"URL\",\"http://icfossiot.net46.net");
             gprsSerial.print("/save_log.php?value=");
             gprsSerial.print(totalMilliLitres);
             gprsSerial.print("&uid=");
             gprsSerial.print(consumer_number);
             gprsSerial.println("\"");
             /*gprsSerial.print("AT+HTTPPARA=\"URL\",\"http://icfossiot.net46.net/save_log.php?uid=");
             gprsSerial.print(consumer_number);
             gprsSerial.print("&value=");
             gprsSerial.print(totalMilliLitres);
             gprsSerial.println("\"");*/
            // gprsSerial.println("AT+HTTPPARA=\"URL\",\"http://icfossiot.net46.net/save_log.php?uid=123456&value=123\"");
             delay(2000);
             toSerial();
          
             // set http action type 0 = GET, 1 = POST, 2 = HEAD
             gprsSerial.println("AT+HTTPACTION=0");
             delay(6000);
             toSerial();
          
             // read server response
             gprsSerial.println("AT+HTTPREAD"); 
             delay(1000);
             toSerial();
          
             gprsSerial.println("");
             gprsSerial.println("AT+HTTPTERM");
             toSerial();
             delay(300);
          
             gprsSerial.println("");
             delay(10000);
            
            
       }
   
}

void toSerial()
{
  while(gprsSerial.available()!=0)
  {
    Serial.write(gprsSerial.read());
  }
}

/*
Insterrupt Service Routine
 */
void pulseCounter()
{
  // Increment the pulse counter
  pulseCount++;
}
